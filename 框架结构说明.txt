框架由 场景树 和 材质管理器 两部分构成

总体渲染流程如下：
1，遍历场景树，为每个node调用update()，并为各节点保存世界变换矩阵
2，遍历材质管理器，为各material调用render()

这样以material为基准进行渲染（而非以node为基准进行渲染），可保证材质切换次数最少


一，场景树

场景树由node构成

node只提供 变换 查找 和 遍历 功能，其它功能通过在node上挂component实现

目前实现了下面component：
mesh
vb
ib
wireFrameIB
screenLineRender

例如：
若要以solid模式渲染模型，则需在node上挂mesh,vb,ib
若要以wireFrame模式渲染模型，则需在node上挂mesh,vb,wireFrameIB
若要以solid+wireFrame模式渲染模型，则需在node上挂mesh,vb,ib,wireFrameIB

在node上挂screenLineRender实现在2d屏幕空间画线


除了ib和wireFrameIB，用户可自行实现更多类型的ib，只需继承Cc3dIBBase，并实现createIB()，updateIB()接口

用户可自行实现更多类型的component，只需继承Cc3dComponent，并实现start()，update()，drawGizmos()等回调接口，另外通过m_nodeRef成员可以访问到此component所依附的node，进而访问到node上的其它component

camera和lightSource不作为node的component，也不添加到场景树，而是作为全局对象存在

二，材质管理器

材质管理器就是一个material列表

一个material主要包含一个effect和一个textureList

一个texture对象可被多个material公用，因此texture对象带有引用计数
texture通过textureCache创建并缓存

effect对象不公用，每个material拥有自己单独的effect

effect是ID3DXEffect的封装，它将ID3DXEffect的uniform变量和sampler变量反射为自己的成员变量，并缓存变量值--当用户重设这些变量时并不会立刻更新（apply）到ID3DXEffect，而是判断此重设是否确实改变了原有值，如果改变了原有值则标为dirty，当material调用render函数绘制自己时,标为dirty的变量才会apply到ID3DXEffect

material还包含onRenderEnter和onRenderLeave两个函数对象成员，它们在material的render函数的开始和结尾自动回调，用户在创建material时可使用lambda表达式自己实现这两个回调函数的逻辑--如在onRenderEnter中设置渲染状态，在onRenderLeave恢复渲染状态

现在还没找到获取effect对象uniform变量信息的方法，所以暂时为每个.fx文件配置了一个.var文件，其中列出.fx文件中的uniform变量信息以供读取










